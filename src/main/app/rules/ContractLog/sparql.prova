:- eval(test()).

test() :-
	println(["========== sparql_query test =========="]),
	sparql_connect(Connection, "http://beta.sparql.uniprot.org/"),
	println(["==> Connected."]),
	testSelectQuery(Connection),
	println(["==> SELECT query done."]),
	
	sparql_disconnect(Connection),
	println(["==> Disconnected."]).
   
testSelectQuery(Connection) :-
	Protein = "uniprot:Q9VAN0",
	Q1 = '
		PREFIX up:<http://purl.uniprot.org/core/>
		PREFIX uniprot:<http://purl.uniprot.org/uniprot/>
		ASK
		{',
    Q2 = ' a up:Protein .}',
	concat([Q1, Protein, Q2], QueryString),
	println(["WWWWWWWWWWWWWWWWWWWWWW:", QueryString]),
	sparql_ask(Connection, QueryString, queryId1),
	sparql_results(queryId1),
	println([QueryId,": ", Agent], "  "),
	!,
	fail().
testSelectQuery(_):-
    println(["No result"]).
	
testAskQuery(Connection) :-
	QueryString = '
	    PREFIX : <http://www.corporate-semantic-web.de/sswf2013#>
		PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
		ASK WHERE {
			:add rdf:type :Task .
		}
	',
	sparql_ask(Connection, QueryString, QueryId1),
	sparql_results(QueryId1),
	println(['yes']),
	fail().
testAskQuery(_).

testUpdateQuery(Connection) :-
	QueryString = '
	    PREFIX : <http://www.corporate-semantic-web.de/sswf2013#>
		PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
		DELETE DATA {:calculateAgent :available  "false"^^xsd:boolean};
        INSERT DATA {:calculateAgent :available  "true"^^xsd:boolean}
	',
	sparql_update(Connection, QueryString, "http://www.corporate-semantic-web.de/sswf2013#", UpdateId),
	sparql_results(UpdateId),
	fail().
	
testUpdateQuery(_).
