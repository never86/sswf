:- eval(test()).

test() :-
	println(["========== sparqldl_query test =========="]),
	sparqldl_create(Engine, "http://localhost:8080/output.xml"),
	println(["==> An instance of SPARQL-DL engine has been created."]),
	testAskQuery(Engine),
	println(["==> SPARQL-DL ASK query done."]).
   
testSelectQuery(Engine) :-
	QueryString = '
		PREFIX : <http://www.corporate-semantic-web.de/sswf2013#>
		SELECT ?role ?agent
		WHERE {
		Type(?agent, :Agent), 
		PropertyValue(?agent, :hasRole, ?role)}
	',
	sparqldl_select(Engine, QueryString, a),
	sparqldl_results(a, Role,  Agent),
	println([Role, Agent], "  "),
	fail().
testSelectQuery(_).
	
testAskQuery(Engine) :-
	QueryString = '
		PREFIX : <http://www.geneontology.org/go#>
		ASK {
		SubClassOf(:GO:0007444, :GO:0007444)
		} 
	',
	sparqldl_ask(Engine, QueryString, QueryId),
	sparqldl_results(QueryId),
	println(["yes"]),
	!,
	fail().
testAskQuery(_):-
    println(['no']).
