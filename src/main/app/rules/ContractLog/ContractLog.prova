% ------------------------------------------------------------------------------------------------------
%  Copyright (C) 1999-2007 <a href="mailto:adrian.paschke@gmx.de">Adrian Paschke</a>
% 
% The Contractlog library is part of the Rule Based Service Level Agreement (RBSLA)
%  project, available at 
% <a href="https://sourceforge.net/projects/rbsla">SourceForge RBSLA</a>
% 
% More information <a href="http://ibis.in.tum.de/staff/paschke/rbsla/index.htm">RBSLA Project Site</a>
%
% This library is free software; you can redistribute it and/or
% modify it under the terms of the GNU Lesser General Public
% License as published by the Free Software Foundation; either
%  version 2 of the License, or (at your option) any later version.
% 
% This library is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
% Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public
% License along with this library; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%
% ------------------------------------------------------------------------------------------------------

% ------------------------------------------------------------------------------------------------------
% Basic ContractLog Libaries
% 
% ContractLog includes all basic libaries. Use this instead of manual include.
% Problems may arise, if some libaries included double time!
% ------------------------------------------------------------------------------------------------------

moduleOID("ContractLog.prova").

:-eval(consult('math.prova')). % math library
:-eval(consult('list.prova')). % list library
:-eval(consult('list_math.prova')). % list math library
:-eval(consult('datetime.prova')). % date/time library
:-eval(consult('timeinterval.prova')). % time interval library
:-eval(consult('ec.prova')). % event calculus library
:-eval(consult('deontic.prova')). % deontic logic library
:-eval(consult('defeasible_deontic.prova')). % defeasible deontic logic library
:-eval(consult('utils.prova')). % utils
:-eval(consult('owl.prova')). % owl library
:-eval(consult('ecaruntime.prova')). %eca runtime
%:-eval(consult('cache.prova')). %eca runtime
:-eval(consult('update.prova')). %eca runtime
 
