%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../ContractLog/math.prova')).
:-eval(consult('../ContractLog/datetime.prova')).
:-eval(consult('../ContractLog/list.prova')).
:-eval(consult('../ContractLog/update.prova')).
:-eval(consult('../ContractLog/utils.prova')).
:-eval(consult('../ContractLog/owl.prova')).
:-eval(consult('../swf_engine/engine.prova')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).

performative(query).

performative(XID,Performative):-
   performative(Performative).


rcvMsg(XID,esb, From, Performative, [X|Args]) :-
	understandPerformative(XID, From, Performative, [X|Args]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers, [X|Args]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).


understandFunction(failedAgent).
understandFunction(noAgentAvailable).
understandFunction(unavailableAgent).

rcvMsg(XID,esb, From, Performative, [X|Args]) :-
    understandPerformative(XID, From, Performative, [X|Args]),
    not(understandFunction(X)),
	sendMsg(XID,esb,humanAgent, "request", [X|Args]),
	rcvMsg(XID,esb,humanAgent, "answer", [X1|Args1]), 
	sendMsg(XID, esb, From, "answer", [X1|Args1]).
	
% rules for recording exceptions	
rcvMsg(XID,esb, From, Performative, [X|Args]) :-
	understandPerformative(XID, From, Performative, [X|Args]),
	understandFunction(X),
	WorkflowName =  de.fub.csw.TaskManagementCenter.getWfName(XID),
	sendMsg(XID,esb,humanAgent, "inform", [WorkflowName, [X|Args]]),
	processMessage(XID, From, Performative, [X|Args]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !, fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	 performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	 not(performative(Performative)),
	 sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	 sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	 fail().	 
     
processMessage(XID,From,"invalidate", [TaskID, Service]):-
     NewService = de.fub.csw.TaskManagementCenter.getAlternativeService(TaskID, Service),
     isNewServiceAvailable4Validation(XID, From, TaskID, NewService).
      

processMessage(XID,From,Performative, failedAgent(TaskName, TaskID, Agent)):-
     %TODO: write rule which checks signature and mode declarations (dynamic testing)
     findall(A1,getResponsibleAgents(TaskName, A1),Agents),
     NewAgent = de.fub.csw.TaskManagementCenter.findOptimalAgent(Agents),
     isAgentAvailable(XID, From, TaskName, TaskID, NewAgent).     

processMessage(XID,From,Performative, unavailableAgent(TaskName, TaskID, Agent)):-
     %TODO: write rule which checks signature and mode declarations (dynamic testing)
     findall(A1,getResponsibleAgents(TaskName, A1),Agents),
     NewAgent = de.fub.csw.TaskManagementCenter.findOptimalAgent(Agents),
     isAgentAvailable(XID, From, TaskName, TaskID, NewAgent).

isAgentAvailable(XID, From, TaskName, TaskID, "none") :-
     !,
     processMessage(XID, From, "request", noAgentAvailable(TaskName, TaskID)).

isAgentAvailable(XID, From, TaskName, TaskID, NewAgent) :-
     bound(NewAgent),!, 
     println(["EXCEPTION HANDLING AGENT FINDS AN ALTERNATIVE AGETN:", NewAgent, " FOR THE TASK ",TaskName,"."]),
     sendMsg(XID, esb, From, "answer", [TaskID, NewAgent]).
     
processMessage(XID,From,Performative, noAgentAvailable(TaskName, TaskID)):-
     WorkflowName =  de.fub.csw.TaskManagementCenter.getWfName(XID),
     sendMsg(XID, esb,humanAgent,"request", noAgentAvailable(WorkflowName, TaskName)),
     rcvMsg(XID,esb,humanAgent,"answer", modified(ontology)),
     println(["Received the reply from the HUMAN AGENT. TASK_AGENT ONTOLOGY IS MODIFIED BY USER."]),
     allocateTask(XID, TaskName, TaskID, Agent),
     sendMsg(XID, esb, From, "answer", [TaskID, Agent]).
     