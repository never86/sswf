%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../swf_engine/list.prova')).
:-eval(consult('../swf_engine/utils.prova')).
:-eval(consult('../swf_engine/engine.prova')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).

performative(query).

performative(XID,Performative):-
   performative(Performative).


rcvMsg(XID,esb, From, Performative, [X|Args]) :-
	understandPerformative(XID, From, Performative, [X|Args]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers, [X|Args]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).


% rules for recording exceptions	
rcvMsg(XID,esb, From, Performative, [X|Args]) :-
	understandPerformative(XID, From, Performative, [X|Args]),
	WorkflowName =  de.fub.csw.TaskManagementCenter.getWfName(XID),
	sendMsg(XID,esb,humanAgent, "inform", [WorkflowName, [X|Args]]),
	processMessage(XID, From, Performative, [X|Args]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !, fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	 performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	 not(performative(Performative)),
	 sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	 sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	 fail().	 
     

processMessage(XID,From,Performative, failedAgent(TaskName, TaskID, Agent)):-
     updateAgentAvailability(Agent),
     getResponsibleAgents(XID, TaskID, TaskName, NewAgent),
     sendMsg(XID, esb, From, "answer", [TaskID, NewAgent]).     

processMessage(XID,From,Performative, unavailableAgent(TaskName, TaskID, Agent)):-
     updateAgentAvailability(Agent),
     getResponsibleAgents(XID, TaskID, TaskName, NewAgent),
     sendMsg(XID, esb, From, "answer", [TaskID, NewAgent]).
     
processMessage(XID,From,Performative, noAgentAvailable(TaskName, TaskID)):-
     WorkflowName =  de.fub.csw.TaskManagementCenter.getWfName(XID),
     sendMsg(XID, esb, humanAgent, "request", noAgentAvailable(WorkflowName, TaskName)),
     rcvMsg(XID,esb, humanAgent, "answer", modified(ontology)),
     println(["Received the reply from the HUMAN AGENT. TASK_AGENT ONTOLOGY IS MODIFIED BY USER."]),
     getResponsibleAgents(XID, TaskID, TaskName, NewAgent),
     sendMsg(XID, esb, From, "answer", [TaskID, NewAgent]).
     
 updateAgentAvailability(Agent):-
     URL = de.fub.csw.constant.StringConstants.SEMANTIC_DATA_REPOSITORY_URL,
     semanticDataConnection(URL, Connection),
     UpdateString =  de.fub.csw.constant.StringConstants.updateAgent(Agent),
     BASE_URL = de.fub.csw.constant.StringConstants.WF_ONTOLOGY_BASE_URL,
     sparql_update(Connection, UpdateString, BASE_URL, updateID),
     println(["--------------", Agent, " was updated to unavailable.-------------------"]),
     % remove the results from the knowledge base
     retract(sparql_results(updateID)).
     