%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../ContractLog/math.prova')).
:-eval(consult('../ContractLog/datetime.prova')).
:-eval(consult('../ContractLog/list.prova')).
:-eval(consult('../ContractLog/update.prova')).
:-eval(consult('../ContractLog/utils.prova')).
%:-eval(consult('calendar.prova')). % calendar API
:-eval(consult('../ContractLog/owl.prova')).
:-eval(consult('../swf_engine/agent.prova')).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).
performative(start).
performative(query).

performative(XID,Performative):-
   performative(Performative).

rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	processMessage(XID, From, Performative, [TaskName|ParaList]).
rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers,[TaskName|ParaList]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !,fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	not(performative(Performative)),
	sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	fail().
	
processMessage(XID,From,Primitive,[TaskName, TaskID, Inputs,Outputs]):-
     % send a message to start the task
     findAvaibleService(XID, TaskID, TaskName, Service),
     println(["The Service:", Service, " is selected to perform the Task ", TaskName, "."]),
     
     validateTask(XID, TaskID, Service, NewService),
     println(["The PRECONDITION of the SERVICE:", Service, " is validate. The TASK is ", TaskID, "."]),
     
     invokeService(XID, TaskID, NewService),
     rcvMsg(XID, async, 0, "answer", [TaskID, Output]),
     sendMsg(XID,esb,From, "answer", Output).
     

% receive the event of service validation
validateTask(XID, TaskID, Service, NewService) :-
    Validation = de.fub.csw.TaskAux.validatePrecondition(TaskID, Service),
    isValidate(XID,TaskID, Service, NewService, Validation).

isValidate(XID, TaskID, Service, NewService, true):-
    NewService = Service.
	
isValidate(XID, TaskID, Service, NewService, false) :-
    println(["THE RPECONDITION OF THE SERVICE", Service, " is invalidate. The TASK is ", TaskID, ". THE EXCEPTION IS FORWARED TO EXCEPTION HANDLING AGENT."]),
    append([inArgs],InList,InList1),
    sendMsg(XID,esb,csw2012_ExceptionHandlingAgent, "invalidate", [TaskID, Service]),
    rcvMsg(XID,esb,csw2012_ExceptionHandlingAgent, "answer", [validate, TaskID, NewService]).

