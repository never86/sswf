%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../swf_engine/list.prova')).
:-eval(consult('../swf_engine/utils.prova')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).
performative(start).
performative(query).

performative(XID,Performative):-
   performative(Performative).

rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	processMessage(XID, From, Performative, [TaskName|ParaList]).
rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers,[TaskName|ParaList]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !,fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	not(performative(Performative)),
	sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	fail().
	
processMessage(XID,From,Primitive, obtainReliableGOTerms(TID, inArgs(Protein), outArgs(ReliableGOTerms))):-
     L1 = java.lang.System.currentTimeMillis(),
     %validateProtein(XID, From, Protein),
     L2 = java.lang.System.currentTimeMillis(),
     L3 = L2 - L1,
     println(["------------------------->  Validating ", Protein, " takes ", L3, "ms"]),
     
     obtainReliableGOTerms(Protein, ReliableGOTerms),
     sendMsg(XID,esb,From, "answer", [TID, inArgs(Protein), outArgs(ReliableGOTerms)]).    
     	
validateProtein(XID, From, Protein) :-
	semanticDataConnection("http://beta.sparql.uniprot.org/", Connection),
	println(["==> Connected."]),
	Q1 = '
		PREFIX up:<http://purl.uniprot.org/core/>
		PREFIX uniprot:<http://purl.uniprot.org/uniprot/>
		ASK
		{uniprot:',
    Q2 = ' a up:Protein .}',
	concat([Q1, Protein, Q2], QueryString),
	println([QueryString]),
	sparql_ask(Connection, QueryString, QueryId1),
	sparql_results(QueryId1),
	!.

validateProtein(XID, From, Connection, Protein) :-
	 Result = "Protein is not correct.",
     sendMsg(XID,esb,From, "answer", [obtainReliableGOTerms, outArgs(Result)]),
     fail().


obtainReliableGOTerms(Protein, GOTerms):-
   GOTerms = de.fub.csw.protein.prediction.QuickGOClient.getGOTermsByProteinID(Protein).