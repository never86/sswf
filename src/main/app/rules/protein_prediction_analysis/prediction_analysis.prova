%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../ContractLog/math.prova')).
:-eval(consult('../ContractLog/datetime.prova')).
:-eval(consult('../ContractLog/list.prova')).
:-eval(consult('../ContractLog/update.prova')).
:-eval(consult('../ContractLog/utils.prova')).
:-eval(consult('../ContractLog/owl.prova')).
:-eval(consult('../swf_engine/utils.prova')).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).
performative(start).
performative(query).

performative(XID,Performative):-
   performative(Performative).

rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	processMessage(XID, From, Performative, [TaskName|ParaList]).
rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers,[TaskName|ParaList]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !,fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	not(performative(Performative)),
	sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	fail().

processMessage(XID,From,Primitive, proteinPredicitonAnalysis(TID, inArgs(PredictedGOTerm, ReliableGOTerms), outArgs(Result))):-
     L1 = java.lang.System.currentTimeMillis(),
     validatePredictedGOTerm(XID, From, PredictedGOTerm),
    
     
     L4 = java.lang.System.currentTimeMillis(),
     analysis(ReliableGOTerms, PredictedGOTerm, Result),
     L5 = java.lang.System.currentTimeMillis(),
     L6 = L5 - L4,
     println(["------------------------->  Validating ", PredictedGOTerm, " takes ", L6, "ms"]),
     
     L2 = java.lang.System.currentTimeMillis(),
     L3 = L2 - L1,
     println(["------------------------->  Overall prediction result analysis takes ", L3, "ms  ", $Count]),
     
     sendMsg(XID,esb,From, "answer", [TID, inArgs(PredictedGOTerm, ReliableGOTerms), outArgs(Result)]).



validatePredictedGOTerm(XID, From, PredictedGOTerm):-
     semanticDataConnection("http://beta.sparql.uniprot.org/", Connection),
	 println(["==> Connected."]),
	 queryPredictedGOTerm(Connection, PredictedGOTerm),
	 sparql_results(QueryId1),
	 !.

validatePredictedGOTerm(XID, From, PredictedGOTerm):-
     Result = "PredictedGOTerm is not correct.",
     sendMsg(XID,esb,From, "answer", [TID, inArgs(Protein), outArgs(Result)]),
     fail().
     	
queryPredictedGOTerm(Connection, PredictedGOTerm) :-
	PredictedGOTerm1 = PredictedGOTerm.substring(3),
	Q1 = '
		PREFIX up:<http://purl.uniprot.org/core/>
		PREFIX uniprot:<http://purl.uniprot.org/uniprot/>
		ASK
		{<http://purl.uniprot.org/go/',
    Q2 = '> a up:Concept .}',
	concat([Q1, PredictedGOTerm1, Q2], QueryString),
	sparql_ask(Connection, QueryString, QueryId1).


analysis(ReliableGOTerms, PredictedGOTerm, Result):-
   $Count = 0,
   Onto = "http://localhost:8080/output.xml",
   reasonEngine(Onto, Engine),
   element(GOTerm, ReliableGOTerms),
   $Count = $Count + 1,
   QueryString = de.fub.csw.constant.StringConstants.goTermAnalysisQuery(GOTerm, PredictedGOTerm),
   askQuery(Engine, QueryString, Result),
   Result = "yes",
   !.
   
analysis(ReliableGOTerms, PredictedGOTerm, Result):-
   Result = "no".
   
askQuery(Engine, QueryString, Result):-
   sparqldl_ask(Engine, QueryString, QueryId),
   sparqldl_results(QueryId),
   Result = "yes",
   !.
   
askQuery(Engine, QueryString, Result):-
   Result = "no".