%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../ContractLog/math.prova')).
:-eval(consult('../ContractLog/datetime.prova')).
:-eval(consult('../ContractLog/list.prova')).
:-eval(consult('../ContractLog/update.prova')).
:-eval(consult('../ContractLog/utils.prova')).
:-eval(consult('../ContractLog/owl.prova')).
:-eval(consult('../swf_engine/utils.prova')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).
performative(start).
performative(query).

performative(XID,Performative):-
   performative(Performative).

rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	processMessage(XID, From, Performative, [TaskName|ParaList]).
rcvMsg(XID,esb, From, Performative, [TaskName|ParaList]) :-
	understandPerformative(XID, From, Performative, [TaskName|ParaList]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers,[TaskName|ParaList]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !,fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	 not(performative(Performative)),
	 sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	 sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	 fail().
	 
processMessage(XID,From,Primitive, snowSampleIdentification(TID, inArgs(File), outArgs(Result))):-
     ident(File, Result),

     sendMsg(XID,esb,From, "answer", [TID, inArgs(File), outArgs(Result)]).


%:-eval(ident("src/main/app/rules/snow_depth_monitoring/samples.txt", Result)).

ident(File, Result):-
     findall(R,identSamples(File, R), RS),
     Result = de.fub.csw.snow.identification.SampleProcessing.processResults(RS).

identSamples(File, Result):-
     % File = "./src/main/app/rules/snow_depth_monitoring/samples.txt",
      fopen(File,Reader),
      read_enum(Reader,Line),
      List = de.fub.csw.snow.identification.SampleProcessing.getSampleItems(Line),
      Station = List.get(0),
      Year = List.get(1),
      Month = List.get(2),
      Day = List.get(3),
      DayMaxTemp = List.get(4),
      Tb36V = List.get(5),
      Tb18V = List.get(6),
      Depth = List.get(7),
      identSample(sample(Station, Year, Month, Day, DayMaxTemp, Tb36V, Tb18V, Depth), R),
      R = 'true',
      concat([Line, " "], Temp),
      concat([Temp, R], Result).

identSample(sample(Station, Year, Month, Day, DayMaxTemp, Tb36V, Tb18V, Depth), Result):-
     checkDepth(Depth), 
     notThaw(Month, DayMaxTemp),
     drySnow(Tb36V, Tb18V),
     not(frostLayer(Station, Year, Month, Depth)),
     checkElevation(Station),
     Result = 'true', 
     !.

identSample(sample(Station, Year, Month, Day, DayMaxTemp, Tb36V, Tb18V, Depth), Result):-
     Result = 'false', !.

frostLayer(Station, Year, Month, Depth):-
     monthAvgTemp(Station, Year, Month, MonthAvgTemp),
     less(MonthAvgTemp, 10),
     more(Depth, 0.5),
     less(Depth, 10).  

drySnow(Tb36V, Tb18V):-
     more(Tb36V, 195.0),
     less(Tb36V, 225.0),
     less(Tb18V, 255.5).

notThaw(Month, DayMaxT):-
     notequ(Month, 3),
     less(DayMaxT, 6).  
    
checkTemperature(Temp) :-
   tempMetric(TempMetric),
   less(Temp,TempMetric).
   

   
checkDepth(Depth) :-
   depthMetric(DepthMetric),
   moreequ(Depth, DepthMetric).
   
   
checkElevation(Station) :-
   stationElevation('Fuhai', Ele),
   elevationMetric(EleMetric),
   less(Ele, EleMetric).
   
depthMetric(3.0).

tempMetric(6).
   
elevationMetric(2000).
   
stationElevation('Fuhai', 500.9).

monthAvgTemp('Fuhai', 2004, 01, -20.9).
monthAvgTemp('Fuhai', 2005, 02, -23.4).
monthAvgTemp('Fuhai', 2005, 01, -21.2).
