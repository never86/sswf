:-eval(consult('utils.prova')).

executeTask(XID, TaskName, TaskID, Inputs, Outputs) :-
    % register the information of a task into the task management center
    de.fub.csw.TaskManagementCenter.registerTask(TaskID, TaskName, Inputs, Outputs),
    
    % allocate a task to an agent
    allocateTask(XID, TaskName, TaskID, Agent),
    
    % invoke the task  
    invokeTask(XID, TaskName, TaskID, Agent, Inputs, Outputs).


allocateTask(XID, TaskName, TaskID, Agent) :-
    L1 = java.lang.System.currentTimeMillis(),
    getResponsibleAgents(XID, TaskID, TaskName, Agent),
    L2 = java.lang.System.currentTimeMillis(),
    L3 = L2 - L1,
    println(["------------------------->  Finding a responsible agent for task ", TaskName, " takes ", L3, "ms"]),
    
    println(["The TASK: ", TaskName, "(", TaskID,") is allocated to AGENT:",Agent]).


% find an available agent
getResponsibleAgents(XID, TaskID, TaskName, Agent) :-
    URL = de.fub.csw.constant.StringConstants.SEMANTIC_DATA_REPOSITORY_URL,
    semanticDataConnection(URL, Connection),
    QueryString =  de.fub.csw.constant.StringConstants.queryAgentByTask(TaskName),
    println(["------------------------Query an available agent--------------------------------"]),
    println([QueryString]),
    println(["---------------------------END-----------------------------"]),
	sparql_select(Connection, QueryString, queryID),
	sparql_results(queryID, FullAgentName),
	% remove the results from the knowledge base
	retract(sparql_results(queryID,_)),
	getLocalName(FullAgentName, Agent),
	println(["----------------------", Agent, " is selected-----------------------------"]),
	!.

% no agent is found
getResponsibleAgents(XID, TaskID, TaskName, Agent) :-
    println(["NO AVAILABLE AGENT TO TASK: ", TaskName, "(", TaskID,"). THE EXCEPTION IS FORWARED TO EXCEPTION HANDLING AGENT."]),
    sendMsg(XID,esb,exceptionHandlingAgent, "request", noAgentAvailable(TaskName, TaskID)),
    rcvMsg(XID, esb, exceptionHandlingAgent, "answer", [TaskID, Agent]).

      
invokeTask(XID, TaskName, TaskID, Agent, Inputs, Outputs) :-
    sendMsg(XID,esb, Agent, "start", [TaskName, TaskID,Inputs,Outputs]),
    checkReceipt(XID, Agent, TaskName, TaskID,Inputs,Outputs).

checkReceipt(XID, Agent, TaskName, TaskID, Inputs, Outputs):-
    feedback(TaskID, failed),
    !,
    retract(feedback(TaskID, failed)),
    sendMsg(XID,esb,exceptionHandlingAgent, "request", unavailableAgent(TaskName, TaskID, Agent)),
    rcvMsg(XID, esb,exceptionHandlingAgent, "answer", [TaskID, NewAgent]),
    invokeTask(XID, TaskName, TaskID, NewAgent,Inputs,Outputs).

checkReceipt(XID, Agent, TaskName, TaskID, Inputs, Outputs):-
    feedback(TaskID, success),
    retract(feedback(TaskID, success)),
    println(["The workflow engine is waiting for the answer from the AGENT:", Agent]).


assignTaskID(XID, TID) :-
    R = java.util.UUID.randomUUID(),
    concat([XID,"_",R],R1),
    R2 = R1.replace(":", "_"),
    TID = R2.substring(0,20).

getLocalName(FullName, LocalName) :-
    P = FullName.lastIndexOf("#"),
    P1 = P + 1,
    LocalName = FullName.substring(P1).
    
    