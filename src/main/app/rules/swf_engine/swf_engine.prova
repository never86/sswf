%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The Super Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../ContractLog/math.prova')).
:-eval(consult('../ContractLog/datetime.prova')).
:-eval(consult('../ContractLog/list.prova')).
:-eval(consult('../ContractLog/update.prova')).
:-eval(consult('../ContractLog/utils.prova')).
:-eval(consult('engine.prova')).
:-eval(consult('utils.prova')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).
performative(query).

performative(XID,Performative):-
     performative(Performative).

rcvMsg(XID,Protocol, From, Performative, [X|Args]) :-
	  understandPerformative(XID, From, Performative, [X|Args]),
	  processMessage(XID, From, Performative, [X|Args]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !,fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	  performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	  not(performative(Performative)),
	  sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	  sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	  fail().

processMessage(XID,From,Primitive, [WorkflowName, Inputs, Outputs]):-
     println(["The WORKFLOW:", WorkflowName, " is started."]),
     % register the workflow
     de.fub.csw.TaskManagementCenter.registerWorkflow(XID, WorkflowName),
     % start a workflow
     workflow(XID, From, WorkflowName, Inputs, Outputs),
     
     println(["The WORKFLOW: ", WorkflowName, " is completed."]),
   
     % unregister the workflow
     de.fub.csw.TaskManagementCenter.cleanWorkflow(XID, WorkflowName).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

workflow(XID, From, "wcp02_Parallel_Split_wcp03_Synchronization", inArgs(I11,I12), outArgs(O1, O2)) :-
     branch(XID, From, I11, I12).
     
branch(XID, From, I11, I12) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'add', TID1, inArgs(I11,100.0),outArgs(O11)),
     @group(g1)
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(I11,100.0),outArgs(O11)]). 
     
branch(XID, From, I11, I12) :-
     assignTaskID(XID, TID2),
     executeTask(XID, 'add', TID2, inArgs(I12,200.0),outArgs(O21)),
     @group(g1)
     rcvMsg(XID, esb, _, "answer", [TID2, inArgs(I12,200.0),outArgs(O21)]).     

branch(XID, From, I11, I12) :-
     @and(g1)
     rcvMsg(XID,Protocol, _, and, Events),
     findall(O1,processReactionGroupResults(Events, O1), Outputs),
     Output = de.fub.csw.TaskAux.prepareReactionGroupResults(Outputs),
     sendMsg(XID, esb, From, "answer", ["wcp02_Parallel_Split_wcp03_Synchronization", inArgs(I11,I12), Output]).
    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     
workflow(XID, From, "wcp09_Structured_Discriminator", inArgs(I11,I12), outArgs(WorkflowOutput)) :-
     branch1(XID, From, I11, I12).
     
branch1(XID, From, I11, I12) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'add', TID1, inArgs(I11,100.0),outArgs(O11)),
     @group(g1)
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(I11,100.0),outArgs(O11)]). 
     
branch1(XID, From, I11, I12) :-
     assignTaskID(XID, TID2),
     executeTask(XID, 'add', TID2, inArgs(I12,200.0),outArgs(O21)),
     @group(g1)
     rcvMsg(XID, esb, _, "answer", [TID2, inArgs(I12,200.0),outArgs(O21)]).
     

branch1(XID, From, I11, I12) :-
     @or(g1)
     rcvMsg(XID,Protocol, _,or, Events),
     findall(O1,processReactionGroupResults(Events, O1), Outputs),
     Output = de.fub.csw.TaskAux.prepareReactionGroupResults(Outputs),
     sendMsg(XID, esb, From, "answer", ["wcp09_Structured_Discriminator", inArgs(I11,I12), Output]).
     
processReactionGroupResults(Events, Output):-
     head(H1, Events),
     element(Event, H1),
     retrieveOutput(Event, Output). 
         
retrieveOutput([XID, Protocol, Sender, Performative, [TaskID, [inArgs|Inputs], [outArgs|Outputs]]], Outputs).  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      

workflow(XID, From, "wcp04_ExclusiveChoice", inArgs(I11,I12), outArgs(WorkflowOutput)) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'add', TID1, inArgs(I11,I12),outArgs(O11)),
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(I11,I12),outArgs(O11)]),
     
     or(XID, O11, WorkflowOutput),
     
     sendMsg(XID, esb, From, "answer", ["wcp04_ExclusiveChoice", inArgs(I11,I12), outArgs(WorkflowOutput)]).
 
or(XID, Para, Output):-    
     more(Para,11),!,
     assignTaskID(XID, TID),
     executeTask(XID, 'minus', TID, inArgs(Para, 100.0),outArgs(Output)),
     rcvMsg(XID, esb, From, "answer", [TID, inArgs(Para, 100.0), outArgs(Output)]).

or(XID, Para, Output):-
     lessequ(Para,11),!,
     assignTaskID(XID, TID),
     executeTask(XID, 'add', TID, inArgs(Para, 100.0), outArgs(Output)),
     rcvMsg(XID, esb, _, "answer", [TID, inArgs(Para, 100.0),outArgs(Output)]).
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

workflow(XID, From, "wcp01_Sequence", inArgs(I11,I12, I22), outArgs(WorkflowOutput)) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'add', TID1, inArgs(I11,I12),outArgs(T)),
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(I11,I12),outArgs(T)]),
     
     assignTaskID(XID, TID2),
     executeTask(XID, 'add', TID2, inArgs(T, I22),outArgs(O21)),
     rcvMsg(XID, esb, _, "answer", [TID2, inArgs(T, I22),outArgs(WorkflowOutput)]),
     
     sendMsg(XID, esb, From, "answer", ["wcp01_Sequence", inArgs(I11,I12, I22), outArgs(WorkflowOutput)]).
          

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     
workflow(XID, From, "nestedWorkflow", inArgs(I11,I12), outArgs(WorkflowOutput)) :-
     assignTaskID(XID, TID),
     executeTask(XID, 'minus', TID, inArgs(I11,I12),outArgs(O11)),
     rcvMsg(XID, esb, _, "answer", [TID, inArgs(I11,I12),outArgs(O11)]),
     
     % invoke an existing workflow
     sendMsg(XID, esb, semantic_SWF_Engine, "query", ["wcp04_ExclusiveChoice", inArgs(O11,200.0), outArgs(WO1)]),
     rcvMsg(XID, esb, semantic_SWF_Engine, "answer", ["wcp04_ExclusiveChoice", inArgs(O11,200.0), outArgs(WorkflowOutput)]),
     
     sendMsg(XID, esb, From, "answer", ["nestedWorkflow", inArgs(I11,I12), outArgs(WorkflowOutput)]).
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

workflow(XID, From, "wcp01_Sequence_test", inArgs(I11,I12, I22), outArgs(WorkflowOutput)) :-
     assignTaskID(XID, TID1),
     executeTask(XID,'minus', TID1, inArgs(I11,I12),outArgs(O11)),
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(I11,I12),outArgs(O11)]),
     
     assignTaskID(XID, TID2),
     executeTask(XID,'minus', TID2, inArgs(O11, I22),outArgs(O21)),
     rcvMsg(XID, esb, _, "answer", [TID2, inArgs(O11, I22),outArgs(WorkflowOutput)]),
     
     sendMsg(XID, esb, From, "answer", ["wcp01_Sequence_test", inArgs(I11,I12, I22), outArgs(WorkflowOutput)]).
     

workflow(XID, From, "proteinPredicitonAnalysisProcess", inArgs(Protein, PredictedGOTerm), outArgs(Result)) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'obtainReliableGOTerms', TID1, inArgs(Protein), outArgs(ReliableGOTerms)),
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(Protein),outArgs(ReliableGOTerms)]),
     !,
     
     assignTaskID(XID, TID2),
     executeTask(XID, 'proteinPredicitonAnalysis', TID2, inArgs(PredictedGOTerm, ReliableGOTerms), outArgs(Result)),
     rcvMsg(XID, esb, _, "answer", [TID2, inArgs(PredictedGOTerm, ReliableGOTerms), outArgs(Result)]),
     
     sendMsg(XID, esb, From, "answer", ["proteinPredicitonAnalysisProcess", inArgs(Protein, PredictedGOTerm), outArgs(Result)]).


workflow(XID, From, "proteinPredicitonAnalysisProcess", inArgs(Protein, PredictedGOTerm), outArgs(Result)) :-
     rcvMsg(XID, esb, _, "answer", [obtainReliableGOTerms, outArgs(Result)]),
     sendMsg(XID, esb, From, "answer", ["proteinPredicitonAnalysisProcess", inArgs(Protein, PredictedGOTerm), outArgs(Result)]),
     !.
     
workflow(XID, From, "proteinPredicitonAnalysisProcess", inArgs(Protein, PredictedGOTerm), outArgs(Result)) :-
     rcvMsg(XID, esb, _, "answer", [proteinPredicitonAnalysis, outArgs(Result)]),
     sendMsg(XID, esb, From, "answer", ["proteinPredicitonAnalysisProcess", inArgs(Protein, PredictedGOTerm), outArgs(Result)]),
     !.
     
workflow(XID, From, "snowSampleIdentificationProcess", inArgs(File), outArgs(Result)) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'snowSampleIdentification', TID1, inArgs(File), outArgs(Result)),
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(File),outArgs(Result)]),
     
     sendMsg(XID, esb, From, "answer", ["snowSampleIdentificationProcess", inArgs(File), outArgs(Result)]).
     
workflow(XID, From, "antIdentificationProcess", [inArgs|Parameters], outArgs(Result)) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'antIdentification', TID1, [inArgs|Parameters], outArgs(Result)),
     rcvMsg(XID, esb, _, "answer", [TID1, [inArgs|Parameters], outArgs(Result)])[Result!="failed"],
     !,
     assignTaskID(XID, TID2),
     executeTask(XID, 'curation', TID2, [inArgs|Parameters], outArgs(Result)),
     rcvMsg(XID, esb, _, "answer", [TID2, done]),
     
     sendMsg(XID, esb, From, "answer", ["antIdentificationProcess", [inArgs|Parameters], outArgs(Result)]).


workflow(XID, From, "antIdentificationProcess", [inArgs|Parameters], outArgs(Result)) :-
     sendMsg(XID, esb, humanAgentProxy, "request", [antIdentification, antIdentificationProcess, [inArgs|Parameters], outArgs(Result)]),
     rcvMsg(XID, esb, humanAgentProxy, "answer", [antIdentification, HumanReply]),
     
     sendMsg(XID, esb, From, "answer", ["antIdentificationProcess", [inArgs|Parameters], outArgs(HumanReply)]).     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

workflow(XID, From, "human_interaction", inArgs(I11,I12), outArgs(WorkflowOutput)) :-
     assignTaskID(XID, TID1),
     executeTask(XID, 'add', TID1, inArgs(I11,I12),outArgs(O11)),
     rcvMsg(XID, esb, _, "answer", [TID1, inArgs(I11,I12),outArgs(O11)]),
     
     sendMsg(XID, esb, humanAgentProxy, "request", assign("human_interaction", value(Var))),
     rcvMsg(XID, esb, humanAgentProxy, "answer", value(Var)),
     
     assignTaskID(XID, TID2),
     executeTask(XID, 'minus', TID2, inArgs(Var, O11),outArgs(O21)),
     rcvMsg(XID, esb, _, "answer", [TID2, inArgs(Var, O11),outArgs(WorkflowOutput)]),
     
     sendMsg(XID, esb, From, "answer", ["human_interaction", inArgs(I11,I12), outArgs(WorkflowOutput)]).     